# -*-eselect-*-  vim: ft=eselect
# Copyright 1999-2013 Gentoo Foundation
# Distributed under the terms of the GNU General Public License v2

DESCRIPTION="Manage D symlinks"
MAINTAINER="marco.leise@gmx.de"
VERSION="20131110"

ETC_PATH="${EROOT%/}/etc"
COMPILER_PATH="${EROOT%/}/usr/bin"
MAN1_PATH="${EROOT%/}/usr/share/man/man1"
MAN5_PATH="${EROOT%/}/usr/share/man/man5"

COMPILERS_VERSION=0
COMPILERS_VENDOR=""

# Find a list of D versions
find_targets() {
	local verRegex="(0|[1-9][0-9]*)(\.(0|[1-9][0-9]*))+"
	local regex

	if [[ "${COMPILERS_VENDOR}" == "dmd" ]]; then
		# DMD
		regex="/opt/dmd-(0\.[1-9][0-9]{1,2}|[12]\.[0-9]{3})"
		find "/opt" -maxdepth 1 -regextype posix-extended -regex "${regex}" -perm "-o+rx" -printf "%f\n" | sort
	elif [[ $COMPILERS_VERSION -eq 1 ]]; then
		# LDC
		regex="/opt/ldc-${verRegex}"
		find "/opt" -maxdepth 1 -regextype posix-extended -regex "${regex}" -type d -printf "%f\n" | sort
	else
		# LDC2
		regex="/opt/ldc2-${verRegex}"
		find "/opt" -maxdepth 1 -regextype posix-extended -regex "${regex}" -type d -printf "%f\n" | sort
	fi
}

symlink_helper() {
	ln -nfs "${1}" "${2}" || die "Couldn't symlink '${1}' as '${2}'!"
}

# Set appropriate symlinks
set_compiler() {
	local target="${1}" targets=($(find_targets)) x
	if is_number "${target}" && [[ ${target} -ge 1 ]]; then
		target=${targets[$((${target} - 1))]}
	fi

	if ! has ${target} "${targets[@]}"; then
		die -q "Invalid target ${target}"
	fi

	if [[ "${COMPILERS_VENDOR}" == "dmd" ]]; then
		symlink_helper "/opt/${target}/bin/dmd"             "${COMPILER_PATH}/dmd"
		symlink_helper "/opt/${target}/bin/dmd.conf"        "${ETC_PATH}/dmd.conf"
		[[ -d ${MAN1_PATH} ]] && symlink_helper "/opt/${target}/man/man1/dmd.1"      "${MAN1_PATH}/dmd.1"
		[[ -d ${MAN5_PATH} ]] && symlink_helper "/opt/${target}/man/man5/dmd.conf.5" "${MAN5_PATH}/dmd.conf.5"
	elif [[ $COMPILERS_VERSION -eq 1 ]]; then
		symlink_helper "/opt/${target}/bin/ldc" "${COMPILER_PATH}/ldc"
	else
		symlink_helper "/opt/${target}/bin/ldc2" "${COMPILER_PATH}/ldc2"
	fi
}

### show action ###

describe_show() {
	echo "Show active D compiler by vendor"
}

describe_show_options() {
	echo "dmd         : Show active Digital Mars D compiler"
	echo "ldc         : Show active LLVM D1 compiler"
	echo "ldc2        : Show active LLVM D2 compiler"
}

do_show() {
	local dmd=0 ldc=0 ldc2=0
	while [[ $# > 0 ]]; do
		case "$1" in
			dmd)
				dmd=1
				;;
			ldc)
				ldc=1
				;;
			ldc2)
				ldc2=1
				;;
			*)
				die -q "Unrecognized argument '$1'"
				;;
		esac
		shift
	done

	if [[ $(( $dmd+$ldc+$ldc2 )) -ne 1 ]]; then
		die -q "Exactly one of 'dmd', 'ldc' or 'ldc2' must be specified"
	fi

	if [[ $dmd -eq 1 ]]; then
		interpreter="$(readlink "${COMPILER_PATH}/dmd" | sed "s#^/opt/##;s#/bin/dmd\$##")"
	elif [[ $ldc -eq 1 ]]; then
		interpreter="$(readlink "${COMPILER_PATH}/ldc" | sed "s#^/opt/##;s#/bin/ldc\$##")"
	elif [[ $ldc2 -eq 1 ]]; then
		interpreter="$(readlink "${COMPILER_PATH}/ldc2" | sed "s#^/opt/##;s#/bin/ldc2\$##")"
	fi

	echo -n "${interpreter}"

	if [[ -n "${interpreter}" ]]; then
		echo
	fi
}

### list action ###

describe_list() {
	echo "List installed D compilers by vendor"
}

describe_list_options() {
	echo "dmd         : List installed Digital Mars D compiler"
	echo "ldc         : List installed LLVM D1 compiler"
	echo "ldc2        : List installed LLVM D2 compiler"
}

describe_list_parameters() {
	echo "<vendor>"
}

do_list() {
	local dmd=0 ldc=0 ldc2=0
	while [[ $# > 0 ]]; do
		case "$1" in
			dmd)
				dmd="1"
				vendor_descriptive_name="Digital Mars D"
				vendor_option="$1"
				COMPILERS_VERSION=0
				COMPILERS_VENDOR="dmd"
				;;
			ldc)
				ldc="1"
				vendor_descriptive_name="LLVM D1"
				vendor_option="$1"
				COMPILERS_VERSION=1
				COMPILERS_VENDOR="ldc"
				;;
			ldc2)
				ldc2="1"
				vendor_descriptive_name="LLVM D2"
				vendor_option="$1"
				COMPILERS_VERSION=2
				COMPILERS_VENDOR="ldc"
				;;
			*)
				die -q "Unrecognized argument '$1'"
				;;
		esac
		shift
	done

	if [[ $(( $dmd+$ldc+$ldc2 )) -ne 1 ]]; then
		die -q "Exactly one of 'dmd', 'ldc' or 'ldc2' must be specified"
	fi

	targets=($(find_targets))

	write_list_start "Available ${vendor_descriptive_name} interpreters:"

	active="$(do_show ${vendor_option})"
	for ((i = 0; i < ${#targets[@]}; i++)); do
		if [[ ${targets[${i}]} == ${active} ]]; then
			targets[${i}]="$(highlight_marker "${targets[${i}]}")"
		fi
	done
	write_numbered_list -m "(none found)" "${targets[@]}"
}

### set action ###

describe_set() {
	echo "Set active D compiler by vendor"
}

describe_set_options() {
	echo "dmd         : Set active Digital Mars D compiler"
	echo "ldc         : Set active LLVM D1 compiler"
	echo "ldc2        : Set active LLVM D2 compiler"
}

describe_set_parameters() {
	echo "<vendor>"
}

do_set() {
	local dmd=0 ldc=0 ldc2=0
	while [[ $# > 0 ]]; do
		case "$1" in
			dmd)
				dmd=1
				COMPILERS_VERSION=0
				COMPILERS_VENDOR="dmd"
				;;
			ldc)
				ldc=1
				COMPILERS_VERSION=1
				COMPILERS_VENDOR="ldc"
				;;
			ldc2)
				ldc2=1
				COMPILERS_VERSION=2
				COMPILERS_VENDOR="ldc"
				;;
			*)
				break
				;;
		esac
		shift
	done

	if [[ $(( $dmd+$ldc+$ldc2 )) -ne 1 ]]; then
		die -q "Exactly one of 'dmd', 'ldc' or 'ldc2' must be specified"
	fi

	if [[ $# -lt 1 ]]; then
		die -q "'eselect dlang set' requires D compiler name"
	elif [[ $# -gt 1 ]]; then
		die -q "'eselect dlang set' requires 1 argument"
	else
		if ! set_compiler "${1}"; then
			die -q "Can't set new compiler"
		fi
	fi
}

### update action ###

describe_update() {
	echo "Switch to the most recent D implementations"
}

describe_update_options() {
	echo "--if-unset    : Do not override existing implementation"
	echo "dmd         : Set active Digital Mars D compiler"
	echo "ldc         : Set active LLVM D1 compiler"
	echo "ldc2        : Set active LLVM D2 compiler"
}

do_update() {
	local if_unset=0 dmd=0 ldc=0 ldc2=0 targets
	while [[ $# > 0 ]]; do
		case "$1" in
			--if-unset)
				if_unset=1
				;;
			dmd)
				dmd=1
				;;
			ldc)
				ldc=1
				;;
			ldc2)
				ldc2=1
				;;
			*)
				break
				;;
		esac
		shift
	done

	# No vendor name given means all
	if [[ $(( $dmd+$ldc+$ldc2 )) -eq 0 ]]; then
		dmd=1
		ldc=1
		ldc2=1
	fi

	if [[ $dmd -eq 1 ]]; then
		if [[ $if_unset -eq 0 ]] || [[ -z "$(do_show dmd)" ]]; then
			COMPILERS_VERSION=0
			COMPILERS_VENDOR="dmd"
			targets=($(find_targets))
			if [[ ${#targets[@]} -eq 0 ]]; then
				echo "No dmd installed, skipping."
			else
				do_set dmd "${targets[${#targets[@]}-1]}"
			fi
		fi
	fi
	if [[ $ldc -eq 1 ]]; then
		if [[ $if_unset -eq 0 ]] || [[ -z "$(do_show ldc)" ]]; then
			COMPILERS_VERSION=1
			COMPILERS_VENDOR="ldc"
			targets=($(find_targets))
			if [[ ${#targets[@]} -eq 0 ]]; then
				echo "No ldc installed, skipping."
			else
				do_set ldc "${targets[${#targets[@]}-1]}"
			fi
		fi
	fi
	if [[ $ldc2 -eq 1 ]]; then
		if [[ $if_unset -eq 0 ]] || [[ -z "$(do_show ldc2)" ]]; then
			COMPILERS_VERSION=2
			COMPILERS_VENDOR="ldc"
			targets=($(find_targets))
			if [[ ${#targets[@]} -eq 0 ]]; then
				echo "No ldc2 installed, skipping."
			else
				do_set ldc2 "${targets[${#targets[@]}-1]}"
			fi
		fi
	fi
}
